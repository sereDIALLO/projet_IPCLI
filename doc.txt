class SobelOperator {
public:
    static std::vector<std::vector<double>> gradient(const std::vector<std::vector<double>>& image) {
        std::vector<std::vector<double>> grayImage(image);

        std::vector<std::vector<double>> gradientX = applySobel(grayImage, sobelFilterX());
        std::vector<std::vector<double>> gradientY = applySobel(grayImage, sobelFilterY());

        std::vector<std::vector<double>> gradientMagnitude(image.size(), std::vector<double>(image[0].size(), 0.0));

        for (size_t i = 0; i < image.size(); ++i) {
            for (size_t j = 0; j < image[0].size(); ++j) {
                gradientMagnitude[i][j] = sqrt(gradientX[i][j] * gradientX[i][j] + gradientY[i][j] * gradientY[i][j]);
            }
        }

        return gradientMagnitude;
    }

private:
    static std::vector<std::vector<int>> sobelFilterX() {
        return {{-1, 0, 1},
                {-2, 0, 2},
                {-1, 0, 1}};
    }

    static std::vector<std::vector<int>> sobelFilterY() {
        return {{-1, -2, -1},
                {0, 0, 0},
                {1, 2, 1}};
    }

    static std::vector<std::vector<double>> applySobel(const std::vector<std::vector<double>>& image, const std::vector<std::vector<int>>& filter) {
        int filterSize = filter.size();
        int halfFilterSize = filterSize / 2;
        std::vector<std::vector<double>> result(image.size(), std::vector<double>(image[0].size(), 0.0));

        for (size_t i = halfFilterSize; i < image.size() - halfFilterSize; ++i) {
            for (size_t j = halfFilterSize; j < image[0].size() - halfFilterSize; ++j) {
                double sumX = 0.0, sumY = 0.0;
                for (int k = -halfFilterSize; k <= halfFilterSize; ++k) {
                    for (int l = -halfFilterSize; l <= halfFilterSize; ++l) {
                        sumX += image[i + k][j + l] * filter[k + halfFilterSize][l + halfFilterSize];
                        sumY += image[i + k][j + l] * filter[l + halfFilterSize][k + halfFilterSize]; // Transpose
                    }
                }
                result[i][j] = sqrt(sumX * sumX + sumY * sumY);
            }
        }
        return result;
    }
};